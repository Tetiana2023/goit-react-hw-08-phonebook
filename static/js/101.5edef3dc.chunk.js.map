{"version":3,"file":"static/js/101.5edef3dc.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/ContactItem/ContactItem.module.css?be2b","components/ContactItem/ContactItem.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","redux/selectors.js","components/ContactList/ContactList.jsx","components/FilterContact/FilterContact.jsx","webpack://react-homework-template/./src/components/Section/Section.module.css?dbe8","components/Section/Section.jsx","webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","pages/Contacts.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"item\":\"ContactItem_item__gxreB\",\"button\":\"ContactItem_button__IRFBz\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport css from './ContactItem.module.css';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/operations';\n\nexport const ContactItem = ({ name, number, id }) => {\n  const dispatch = useDispatch();\n  // const { name, number, id } = contact;\n\n  const onClick = ()=> {\n    dispatch(deleteContact({id}))\n  }\n  return (\n    <>\n      <div className={css.item}>\n        <p>{name}:</p>\n        <p>{number}</p>\n        <button\n          className={css.button}\n          type=\"button\"\n          onClick={onClick}\n          // onClick={() => dispatch(deleteContact(id))}\n        >\n          Delete\n        </button>\n      </div>\n    </>\n  );\n};\n\nContactItem.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      phone: PropTypes.string.isRequired,\n    })\n  ),\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactList_list__csErn\"};","import { createSelector } from \"@reduxjs/toolkit\";\n\nexport const selectContacts = state => state.phonebook.items;\nexport const selectError = state => state.phonebook.error;\nexport const selectIsLoading = state => state.phonebook.isLoading;\n\nexport const selectFilter = state => state.filter;\n\nexport const selectFiltredContacts = createSelector (\n    [selectContacts, selectFilter], (contacts, filter )=> contacts.filter(contact =>\n        contact.name.toLowerCase().includes(filter.toLowerCase())\n)\n)\n","import React from 'react';\nimport { ContactItem } from 'components/ContactItem/ContactItem';\nimport css from './ContactList.module.css';\nimport PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux';\n\nimport { selectFiltredContacts } from 'redux/selectors';\n// import { deleteContact } from 'services/fetch';\n\nexport const ContactList = () => {\n  const FiltredContacts = useSelector(selectFiltredContacts);\n\n  return (\n    <ul>\n      {FiltredContacts.map(contact => (\n        <li className={css.list} key={contact.id}>\n          <ContactItem\n            key={contact.id}\n            name={contact.name}\n            number={contact.number}\n            id={contact.id}\n          />\n        </li>\n      ))}\n    </ul>\n  );\n};\n\n// export const ContactList = () => {\n//   const FiltredContacts = useSelector(getFiltredContacts);\n\n//   return (\n//     <>\n//       <ul>\n//         {FiltredContacts.map(contact => (\n//           <li className={css.list} key={contact.id}>\n//             <ContactItem contact={contact} />\n//           </li>\n//         ))}\n//       </ul>\n//     </>\n//   );\n// };\nContactList.propType = {\n  contacts: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }).isRequired,\n};\n","import React from \"react\";\nimport { nanoid } from 'nanoid';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectFilter} from 'redux/selectors';\nimport {updateFilter} from 'redux/filterSlice'\n\n\nexport const FilterContact =() => {\n    const filter = useSelector(selectFilter);\n    const dispatch = useDispatch();\n\n    // const hendleFilter = event => {\n    //     dispatch(updateFilter(event.target.value));\n    //   };\n\n   const filterId= nanoid(); \n   return (\n        <>\n        <label htmlFor={filterId}>Find contacts by name\n            <input id={filterId}\n            type=\"text\"\n            value={filter}\n            name=\"filter\"\n            onChange={event => \n                dispatch(updateFilter(event.target.value))\n              }\n            >\n            </input>\n        </label>\n        </>\n    )\n}\nFilterContact.propType = {\n    value:PropTypes.string.isRequired,\n    hendleFilter:PropTypes.func.isRequired,\n}","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"Section_title__SLHvV\"};","import css from './Section.module.css';\nimport PropTypes from 'prop-types';\n\nexport const Section = ({title, children}) => {\n    return (\n        <>\n        {title && <h1 className={css.title}>{title}</h1>}\n        {children}\n        </>\n    )\n}\nSection.propType ={\n    title:PropTypes.string.isRequired,\n}","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"formbtn\":\"ContactForm_formbtn__5569G\"};","import { nanoid } from 'nanoid';\nimport { useState } from 'react';\nimport css from './ContactForm.module.css';\nimport Notiflix from 'notiflix';\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addContact } from 'redux/operations';\nimport { selectContacts } from 'redux/selectors';\n\nexport const ContactForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleInputChange = event => {\n    const { name, value } = event.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n  //  const isContactExist = contacts.find(\n  //   contact => contact.name.toLowerCase() === name.toLowerCase()\n  // );\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (\n      contacts.find(\n        contact => contact.name.toLowerCase() === name.toLowerCase()\n      )\n    ) {\n      Notiflix.Notify.info(`name: ${name} is already in contacts`);\n      reset();\n      return;\n    }\n\n    if (contacts.find(contact => contact.number === number)) {\n      Notiflix.Notify.info(`number: ${number} is already in contacts`);\n      reset();\n      return;\n    }\n    //  isContactExist\n    // ? alert(`${name} is alreadi in contacts`)\n    dispatch(addContact({ name, number, id: nanoid() }));\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n  const nameId = nanoid();\n  const numberId = nanoid();\n  return (\n    <form className={css.form} onSubmit={handleSubmit}>\n      <label htmlFor={nameId}>\n        Name\n        <input\n          id={nameId}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          value={name}\n          onChange={handleInputChange}\n        />\n      </label>\n      <label htmlFor={numberId}>\n        Number\n        <input\n          id={numberId}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          value={number}\n          onChange={handleInputChange}\n        />\n      </label>\n\n      <button className={css.formbtn} type=\"submit\">\n        Add contact{' '}\n      </button>\n    </form>\n  );\n};\n","import React from 'react';\n// import { FormContact } from './ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList'\nimport { FilterContact } from 'components/FilterContact/FilterContact';\n// import {Loader} from './Loader/Loader';\nimport { Section } from 'components/Section/Section';\n\nimport { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectContacts, selectError, selectIsLoading } from 'redux/selectors';\nimport { fetchContacts } from 'redux/operations';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\n\n// import css from './App.module.css';\n\nexport const App = () => {\n  const contacts = useSelector(selectContacts);\n  const error = useSelector(selectError);\n  const isLoading = useSelector(selectIsLoading);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div >\n      <Section title=\"Phonebook\">\n        <ContactForm />\n      </Section>\n      {isLoading && !error && <p>Loading...</p> } \n      {contacts.length > 0 && (\n        <Section title=\"Contacts\">\n          <FilterContact />\n          <ContactList/>\n         \n        </Section>\n      )}\n    </div>\n  );\n};\n"],"names":["ContactItem","name","number","id","dispatch","useDispatch","className","css","type","onClick","deleteContact","selectContacts","state","phonebook","items","selectError","error","selectIsLoading","isLoading","selectFilter","filter","selectFiltredContacts","createSelector","contacts","contact","toLowerCase","includes","ContactList","FiltredContacts","useSelector","map","propType","PropTypes","isRequired","FilterContact","filterId","nanoid","htmlFor","value","onChange","event","updateFilter","target","hendleFilter","Section","title","children","ContactForm","useState","setName","setNumber","handleInputChange","reset","nameId","numberId","onSubmit","e","preventDefault","find","Notiflix","addContact","pattern","required","App","useEffect","fetchContacts","length"],"sourceRoot":""}